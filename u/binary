للأعداد والعوامل: ثنائي.
للملفات والبيانات: رقمي.

نقول عدد ثنائي وعدد <<عشري::decimal>> وعدد <<ستعشري::hexadecimal>> وعدد <<ثُماني::octal>>.
ومنها أن العدد العشري 4 يُمثَّل في نظام الأعداد الثنائية 100.

أما للملفات والبيانات، فنقول رقمي. وهذا لأنها عكس «نصي».
فالبيانات، وبالتبعية الملفات، تُقسم غالبا إلى نوعين: بيانات نصية، وبيانات غير نصية.

البيانات النصية هي التي لا تحتوي إلا على «نصوص»، أما البيانات غير النصية فهي تحتوي على «كل شيء آخر»: الصور والصوتيات والبرامج التنفيذية، إلخ.

هذا التفريق تفريق عملي بحت. فأغلب الأوقات الفرق الوحيد في تعامل البرامج مع النوعين هو اعتبار وجود ال<<مِحرَف::character>> الصفري (``U+0000``) من عدمه، فهو غير موجود في البيانات النصية لكن قد يوجد في البيانات الرقمية.

فرق آخر هو معاملة <<سلسلة::string>> إنهاء السطر على أنظمة التشغيل المختلفة، فويندوز يستعمل السلسلة CRLF (أي ``"\r\n"`` في الكثير من لغات البرمجة)، ولكن الأنظمة اليونكسية مثل ماك (منذ Mac OS X) وغنو/لينكس وأنظمة BSD الحرة وغيرهم، جميعها تستعمل مِحرَف LF (``U+000A``، أي ``"\n"``) وحده. أما مِحرَف CL (``U+000D``، أي ``"\r"``) فله سلوك آخر على هذه الأنظمة.

يظهر هذا الفرق عند فتح الملفات في عدد من لغات البرمجة: الوضع النصي (text) يحوّل سلسلة إنهاء السطر عند القراءة من الملف أو الكتابة إليه إلى ما يستعمله نظام تشغيلك الذي تشغّل عليه البرنامج. وفي الوضع الرقمي (binary) تكون القراءة والكتابة أمينة بغير تحويل أي مِحرَف. (ويظهر هذا في FTP، خصوصا لأن بعض البرامج تفترض الوضع النصي ما لم تغيره إلى الرقمي باختيار صريح، فتتدمر الملفات التنفيذية وغيرها عند النقل.)
(فرق آخر عند فتح الملفات بالوضع النصي هو إمكانية تحديد <<ترميز المحارف::character_encoding>>، بل وجوب تحديده.)

(وهذا التفريق أيضا له سبب تاريخي: كانت النصوص بترميز ASCII، الذي استعمل وقتئذٍ ٧ بِتّات فقط، وتستعمل الملفات الرقمية دوما ٨ بتّات.)

الواقع أن البيانات النصية (text data) جزء من البيانات الرقمية (binary data)، ولكن لها معاملة خاصة نظرا لطبيعتها.
والجميل أن المصطلح العربي يحمل هذا المعنى أيضا، بل يجعله أوضح.
